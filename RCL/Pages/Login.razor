@page "/login"
@inject HttpClient Http
@inject ITokenService TokenService
@inject NavigationManager Navigation
@using RCL.Data.Interfaces
@using System.Net.Http.Headers
@using System.Net.Http.Json

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="max-w-md mx-auto p-6 bg-gray-100 rounded-lg shadow-md">
    <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Login</h2>
    <p class="text-center text-red-600">@message</p>
    <form @onsubmit="HandleLogin">
        <div class="mb-4">
            <label for="username" class="block mb-2 font-bold text-gray-700">Username:</label>
            <input id="username" @bind="loginModel.UserName" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div class="mb-4">
            <label for="password" class="block mb-2 font-bold text-gray-700">Password:</label>
            <input id="password" type="password" @bind="loginModel.Password" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <button type="submit" class="w-full p-2 bg-green-500 text-white rounded hover:bg-green-700">Login</button>
    </form>
</div>

@code {
    private LoginModel loginModel = new();
    private string message = string.Empty;

    private async Task HandleLogin()
    {
        message = string.Empty;

        try
        {
            // Send login request to the API
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result?.Token is not null)
                {
                    // Save the token and userId using the token service
                    await TokenService.SaveTokenAsync(result.Token);
                    await TokenService.SaveUserIdAsync(result.UserId);

                    // Set the token in HttpClient for subsequent requests
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", result.Token);

                    message = "Login successful!";
                    Navigation.NavigateTo("/");
                }
                else
                {
                    message = "Error: Token not received.";
                }
            }
            else
            {
                message = "Login failed. Invalid credentials.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private class LoginModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public string UserId { get; set; } = string.Empty;
    }
}


