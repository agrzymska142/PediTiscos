@using RCL.Data.Interfaces
@inject ITokenService TokenService
@inject NavigationManager Navigation
@inject HttpClient Http

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<div class="bg-blue-500 text-white h-16 flex items-center justify-between px-5 shadow-md">
    <div class="text-2xl font-bold">
        <a href="/" class="hover:text-gray-200 transition-colors duration-300">PediTiscos</a>
    </div>
    <nav class="flex items-center space-x-5">
        <a href="/products" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-box-open"></i> Products</a>
        @* <a href="#" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-info-circle"></i> About us</a>
        <a href="#" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-envelope"></i> Contact</a> *@
        <a href="/cart" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-shopping-cart"></i> Cart</a>
        @if (string.IsNullOrEmpty(fullName))
        {
            <a href="/login" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-sign-in-alt"></i> Login</a>
            <a href="/register" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-user-plus"></i> Register</a>
        }
        else
        {
            <span>Welcome, @fullName</span>
            <a href="/order-history" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-history"></i> Order History</a>
            <a href="#" @onclick="Logout" class="hover:text-gray-200 transition-colors duration-300"><i class="fas fa-sign-out-alt"></i> Logout</a>
        }
    </nav>
</div>

@code {
    private string fullName;
    private bool isInitialized;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            // Subskrybuj zmiany w TokenService
            TokenService.OnUserLoggedIn += HandleUserLoggedIn;

            // Inicjalizuj fullName, jeśli użytkownik jest już zalogowany
            fullName = await TokenService.GetFullNameAsync();

            // Set the token in HttpClient for subsequent requests
            var token = await TokenService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            isInitialized = true; // Upewnij się, że inicjalizacja odbywa się tylko raz
            StateHasChanged();
        }
    }

    private async Task HandleUserLoggedIn()
    {
        fullName = await TokenService.GetFullNameAsync();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await TokenService.ClearTokenAsync(); // Wyczyść przechowywany token
        fullName = null; // Zresetuj pełne imię użytkownika
        StateHasChanged();
        Navigation.NavigateTo("/login"); // Przekieruj na stronę logowania
    }

    public void Dispose()
    {
        // Anuluj subskrypcję zdarzenia, gdy komponent jest usuwany
        TokenService.OnUserLoggedIn -= HandleUserLoggedIn;
    }
}

