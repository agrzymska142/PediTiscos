@using RCL.Data.Interfaces
@inject ITokenService TokenService
@inject NavigationManager Navigation

<link href="_content/RCL/top-part.css" rel="stylesheet" />

<div class="top-bar">
    <div class="logo">
        <a href="/">PediTiscos</a>
    </div>
    <nav class="navigation">
        <a href="/products">Products</a>
        <a href="#">About us</a>
        <a href="#">Contact</a>
        <a href="/cart">Cart</a>
        @if (string.IsNullOrEmpty(fullName))
        {
            <a href="/login">Login</a>
            <a href="/register">Register</a>
        }
        else
        {
            <a>Welcome, @fullName</a>
            <a href="#" @onclick="Logout">Logout</a>
        }
    </nav>
    <div class="search-bar">
        <input type="text" placeholder="Search products..." @bind="searchTerm" />
        <button @onclick="SearchProducts">Search</button>
    </div>
</div>

@code {
    private string fullName;
    private string searchTerm = string.Empty;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            // Subscribe to TokenService changes
            TokenService.OnUserLoggedIn += HandleUserLoggedIn;

            // Initialize fullName if the user is already logged in
            fullName = await TokenService.GetFullNameAsync();

            isInitialized = true; // Ensure initialization only happens once
            StateHasChanged();
        }
    }

    private async Task HandleUserLoggedIn()
    {
        fullName = await TokenService.GetFullNameAsync();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await TokenService.ClearTokenAsync(); // Clear the stored token
        fullName = null; // Reset the user's full name
        StateHasChanged();
        Navigation.NavigateTo("/login"); // Redirect to the login page
    }

    private void SearchProducts()
    {
        Navigation.NavigateTo($"/products?search={searchTerm}");
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        TokenService.OnUserLoggedIn -= HandleUserLoggedIn;
    }
}





