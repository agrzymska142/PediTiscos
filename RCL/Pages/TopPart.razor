@using RCL.Data.Interfaces
@inject ITokenService TokenService
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="bg-blue-500 text-white h-16 flex items-center justify-between px-5 shadow-md">
    <div class="text-2xl font-bold">
        <a href="/">PediTiscos</a>
    </div>
    <nav class="flex items-center space-x-5">
        <a href="/products" class="hover:underline">Products</a>
        <a href="#" class="hover:underline">About us</a>
        <a href="#" class="hover:underline">Contact</a>
        <a href="/cart" class="hover:underline">Cart</a>
        @if (string.IsNullOrEmpty(fullName))
        {
            <a href="/login" class="hover:underline">Login</a>
            <a href="/register" class="hover:underline">Register</a>
        }
        else
        {
            <span>Welcome, @fullName</span>
            <a href="/order-history" class="hover:underline">Order History</a>
            <a href="#" @onclick="Logout" class="hover:underline">Logout</a>
        }
    </nav>
    <div class="flex items-center space-x-2">
        <input type="text" placeholder="Search products..." @bind="searchTerm" class="p-2 rounded border border-gray-300" />
        <button @onclick="SearchProducts" class="bg-white text-blue-500 p-2 rounded hover:bg-gray-200">Search</button>
    </div>
</div>

@code {
    private string fullName;
    private string searchTerm = string.Empty;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            // Subscribe to TokenService changes
            TokenService.OnUserLoggedIn += HandleUserLoggedIn;

            // Initialize fullName if the user is already logged in
            fullName = await TokenService.GetFullNameAsync();

            isInitialized = true; // Ensure initialization only happens once
            StateHasChanged();
        }
    }

    private async Task HandleUserLoggedIn()
    {
        fullName = await TokenService.GetFullNameAsync();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await TokenService.ClearTokenAsync(); // Clear the stored token
        fullName = null; // Reset the user's full name
        StateHasChanged();
        Navigation.NavigateTo("/login"); // Redirect to the login page
    }

    private void SearchProducts()
    {
        Navigation.NavigateTo($"/products?search={searchTerm}");
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        TokenService.OnUserLoggedIn -= HandleUserLoggedIn;
    }
}
