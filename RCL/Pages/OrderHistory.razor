@page "/order-history"
@inject HttpClient Http
@using Blazored.LocalStorage
@using RCL.Data.DTO
@using RCL.Data.Interfaces
@inject ILocalStorageService LocalStorage
@inject ITokenService TokenService

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="max-w-4xl mx-auto p-6 bg-gray-100 rounded-lg shadow-md">
    <h3 class="text-2xl font-bold text-center text-gray-800 mb-6">Order History</h3>

    @if (orders == null)
    {
        <p class="text-center text-gray-600">Loading...</p>
    }
    else if (!orders.Any())
    {
        <p class="text-center text-gray-600">You have no orders.</p>
    }
    else
    {
        <table class="min-w-full bg-white rounded-lg shadow-md">
            <thead>
                <tr>
                    <th class="py-3 px-4 bg-blue-500 text-white">Date</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Total Amount</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-4">@order.OrderDate.ToString("g")</td>
                        <td class="py-3 px-4">@order.TotalAmount.ToString("C")</td>
                        <td class="py-3 px-4">@order.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<OrderDto> orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderHistory();
    }

    private async Task LoadOrderHistory()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var request = new HttpRequestMessage(HttpMethod.Get, "api/products/order-history");
            request.Headers.Add("sessionId", userId);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<List<OrderDto>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching order history: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}



