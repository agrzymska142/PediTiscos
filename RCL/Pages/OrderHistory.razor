@page "/order-history"
@inject HttpClient Http
@using RCL.Data.DTO
@using RCL.Data.Interfaces
@using RCL.Data.Services
@inject ISessionStorageService SessionStorage
@inject ITokenService TokenService
@inject TokenExpirationHandler TokenExpirationHandler

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="max-w-4xl mx-auto p-6 bg-gray-100 rounded-lg shadow-md">
    <h3 class="text-2xl font-bold text-center text-gray-800 mb-6">Order History</h3>

    @if (orders == null)
    {
        <p class="text-center text-gray-600">Loading...</p>
    }
    else if (!orders.Any())
    {
        <p class="text-center text-gray-600">You have no orders.</p>
    }
    else
    {
        <table class="min-w-full bg-white rounded-lg shadow-md">
            <thead>
                <tr>
                    <th class="py-3 px-4 bg-blue-500 text-white">Date</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Total Amount</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Status</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-4">@order.OrderDate.ToString("g")</td>
                        <td class="py-3 px-4">@order.TotalAmount.ToString("C2")</td>
                        <td class="py-3 px-4">@order.Status</td>
                        <td class="py-3 px-4">
                            <button class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700" @onclick="() => ToggleOrderDetails(order)">Show Order Details</button>
                        </td>
                    </tr>
                    @if (order.ShowDetails)
                    {
                        <tr class="border-b border-gray-200">
                            <td colspan="4">
                                <table class="min-w-full bg-gray-100 rounded-lg shadow-md mt-2">
                                    <thead>
                                        <tr>
                                            <th class="py-2 px-4 bg-gray-300 text-gray-800">Product Name</th>
                                            <th class="py-2 px-4 bg-gray-300 text-gray-800">Quantity</th>
                                            <th class="py-2 px-4 bg-gray-300 text-gray-800">Unit Price</th>
                                            <th class="py-2 px-4 bg-gray-300 text-gray-800">Total Price</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detail in order.OrderDetails)
                                        {
                                            <tr>
                                                <td class="py-2 px-4">@detail.ProductName</td>
                                                <td class="py-2 px-4">@detail.Quantity</td>
                                                <td class="py-2 px-4">@detail.UnitPrice.ToString("C2")</td>
                                                <td class="py-2 px-4">@((detail.UnitPrice * detail.Quantity).ToString("C2"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<OrderDto> orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderHistory();
    }

    private async Task LoadOrderHistory()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await SessionStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var request = new HttpRequestMessage(HttpMethod.Get, "api/products/order-history");
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<List<OrderDto>>();
            }
            else
            {
                await TokenExpirationHandler.HandleTokenErrorAsync(response);
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching order history: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void ToggleOrderDetails(OrderDto order)
    {
        order.ShowDetails = !order.ShowDetails;
    }

    public class OrderDto
    {
        public string UserId { get; set; }
        public List<OrderDetailDto> OrderDetails { get; set; }
        public DateTime OrderDate { get; set; }
        public string ClientName { get; set; }
        public string ClientEmail { get; set; }
        public decimal TotalAmount { get; set; }
        public string Status { get; set; }
        public bool ShowDetails { get; set; } // Flaga kontrolująca widoczność szczegółów zamówienia
    }

    public class OrderDetailDto
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; } // Dodano nazwę produktu
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
    }
}
