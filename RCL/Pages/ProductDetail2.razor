@page "/product/{productId:int}"
@inject HttpClient Http
@using System.Net.Http.Json
@using RCL.Data.DTO
@using RCL.Data.Interfaces
@inject ISessionStorageService SessionStorage
@inject ITokenService TokenService
@inject NavigationManager NavigationManager

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="flex justify-center my-10">
    @if (product == null)
    {
        <p class="text-center text-xl text-gray-600">Loading product...</p> <!-- Wyświetl komunikat ładowania, jeśli produkt jest null -->
    }
    else
    {
        <div class="relative bg-white text-gray-800 border-none rounded-lg shadow-lg p-8 max-w-lg w-full text-center transition-transform transform hover:-translate-y-2 hover:shadow-2xl">
            @if (!product.IsActive)
            {
                <div class="absolute top-0 left-0 bg-gray-500 text-white text-xs font-bold px-2 py-1 rounded-br-lg">UNAVAILABLE</div> <!-- Baner UNAVAILABLE -->
                <div class="absolute inset-0 bg-gray-500 opacity-50 rounded-lg"></div> <!-- Szara nakładka -->
            }
            @if (product.Stock == 0)
            {
                <div class="absolute top-0 left-0 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-br-lg">SOLD OUT</div> <!-- Baner SOLD OUT -->
                <div class="absolute inset-0 bg-red-500 opacity-50 rounded-lg"></div> <!-- Czerwona nakładka -->
            }
            <div class="mb-6">
                <h3 class="text-3xl font-bold text-gray-900">@product.Name</h3> <!-- Nazwa produktu -->
            </div>
            <div class="mb-6">
                <img src="@product.ImageUrl" onerror="this.style.display='none'" class="w-full h-auto rounded-lg mb-4" /> <!-- Wyświetlanie obrazu produktu -->
                <p class="text-lg text-gray-700 mb-4">@product.Description</p> <!-- Opis produktu -->
                <p class="text-2xl text-blue-600 font-bold mb-4"><strong>Price:</strong> @product.Price.ToString("C")</p> <!-- Cena produktu -->
                <p class="text-xl text-green-600 mb-4"><strong>Stock:</strong> @product.Stock</p> <!-- Stan magazynowy produktu -->
                @if (product.IsActive && product.Stock > 0)
                {
                    <div class="flex items-center justify-center mb-4">
                        <label for="quantity-@product.ProductId" class="mr-2">Quantity:</label> <!-- Etykieta dla ilości -->
                        <input type="number" id="quantity-@product.ProductId" @bind="product.Quantity" min="1" max="@product.Stock" class="w-16 p-1 border border-gray-300 rounded" /> <!-- Pole wprowadzania ilości -->
                    </div>
                    <button @onclick="() => AddToCart(product)" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Add to cart</button> <!-- Przycisk dodawania do koszyka -->
                }
            </div>
        </div>
    }
</div>

<div class="fixed top-16 left-5 z-10 m-2">
    <button @onclick="NavigateBack" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700 shadow-md">
        Back
    </button>
</div>

@if (showToast)
{
    <div class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300" style="opacity: @(showToast ? 1 : 0);">
        Product added to cart successfully! <!-- Komunikat toast -->
    </div>
}

@code {
    private ProductDTO product; // Zmienna przechowująca szczegóły produktu
    private bool showToast = false; // Flaga kontrolująca widoczność komunikatu toast

    [Parameter]
    public int productId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Pobierz szczegóły produktu z API
            product = await Http.GetFromJsonAsync<ProductDTO>($"api/Products/{productId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product details: {ex.Message}"); // Obsługa błędów
        }
    }

    private async Task AddToCart(ProductDTO product)
    {
        try
        {
            // Pobierz identyfikator użytkownika lub sesji
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await SessionStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            // Utwórz DTO do dodania do koszyka
            var addToCartDto = new AddToCartDto
                {
                    ProductId = product.ProductId,
                    Quantity = product.Quantity
                };

            // Utwórz żądanie HTTP POST
            var request = new HttpRequestMessage(HttpMethod.Post, "api/Products/AddToCart")
                {
                    Content = JsonContent.Create(addToCartDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            // Wyślij żądanie
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddToCartResponseDto>();
                Console.WriteLine($"Success: {result.Message}"); // Wyświetl komunikat sukcesu w konsoli
                ShowToast(); // Pokaż komunikat toast
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {error}"); // Wyświetl komunikat błędu w konsoli
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}"); // Obsługa wyjątków
        }
    }

    private void ShowToast()
    {
        showToast = true; // Ustaw flagę showToast na true
        StateHasChanged(); // Odśwież stan komponentu
        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false; // Ustaw flagę showToast na false po 3 sekundach
            InvokeAsync(StateHasChanged); // Odśwież stan komponentu
        });
    }

    // Klasa DTO do dodania do koszyka
    private class AddToCartDto
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    // Klasa DTO odpowiedzi z dodania do koszyka
    private class AddToCartResponseDto
    {
        public string Message { get; set; }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
