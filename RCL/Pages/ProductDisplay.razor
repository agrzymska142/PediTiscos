@page "/products/{categoryId:int?}"
@inject HttpClient Http
@using System.Net.Http.Json
@using RCL.Data.DTO
@using RCL.Data.Interfaces
@using RCL.Data.Services
@inject ISessionStorageService SessionStorage
@inject ITokenService TokenService

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

@* Extra spacing between TopBar and Cards *@
<div class="spacing"></div>

@* Cards Component with Categories *@
<Categories />

<nav class="p-5 bg-yellow-100 text-gray-800">
    <div class="flex items-center justify-center gap-4 mb-5">
        <input type="text" placeholder="Search products..." @bind="searchTerm" class="p-2 border border-gray-300 rounded" />
        <button @onclick="ApplyFilters" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Search</button>
        <label class="flex items-center gap-2">
            <input type="checkbox" @bind="onlyAvailable" class="w-5 h-5" />
            Only available
        </label>
    </div>

    @if (products == null)
    {
        <p>Loading products...</p>
    }
    else if (products.Count == 0)
    {
        <p>No products available.</p>
    }
    else
    {
        <div class="flex flex-wrap justify-center gap-5 mt-5">
            @foreach (var product in products)
            {
                @if (!onlyAvailable || (product.IsActive && product.Stock > 0))
                {
                    <div class="relative bg-white text-gray-800 border-none rounded-lg shadow-md p-5 w-64 text-center transition-transform transform hover:-translate-y-1 hover:shadow-lg">
                        @if (!product.IsActive)
                        {
                            <div class="absolute top-0 left-0 bg-gray-500 text-white text-xs font-bold px-2 py-1 rounded-br-lg">UNAVAILABLE</div> <!-- Baner UNAVAILABLE -->
                            <div class="absolute inset-0 bg-gray-500 opacity-50 rounded-lg"></div> <!-- Szara nakładka -->
                        }
                        @if (product.Stock == 0)
                        {
                            <div class="absolute top-0 left-0 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-br-lg">SOLD OUT</div> <!-- Baner SOLD OUT -->
                            <div class="absolute inset-0 bg-red-500 opacity-50 rounded-lg"></div> <!-- Czerwona nakładka -->
                        }
                        <a href="product/@product.ProductId" class="no-underline text-inherit">
                            <img src="@product.ImageUrl" onerror="this.style.display='none'" class="w-full h-auto rounded mb-4" /> <!-- Wyświetlanie obrazu produktu -->
                            <div class="font-bold text-xl mb-2">@product.Name</div>
                            <div class="text-gray-600 mb-2">@product.Description</div>
                            <div class="text-blue-500 font-bold mb-2">Price: @product.Price.ToString("C")</div>
                            <div class="text-green-500 mb-4">Stock: @product.Stock</div>
                        </a>
                        @if (product.IsActive && product.Stock > 0)
                        {
                            <div class="flex items-center justify-center mb-4">
                                <label for="quantity-@product.ProductId" class="mr-2">Quantity:</label>
                                <input type="number" id="quantity-@product.ProductId" @bind="product.Quantity" min="1" max="@product.Stock" class="w-16 p-1 border border-gray-300 rounded" />
                            </div>
                            <button @onclick="() => AddToCart(product)" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Add to cart</button>
                        }
                    </div>
                }
            }
        </div>
    }
</nav>

@if (showToast)
{
    <div class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300" style="opacity: @(showToast ? 1 : 0);">
        Product added to cart successfully! 
    </div>
}

@code {
    private List<ProductDTO> products = new();
    private string searchTerm = string.Empty;
    private bool onlyAvailable = false;
    private bool showToast = false; // Flaga kontrolująca widoczność komunikatu toast

    [Parameter]
    public int? CategoryId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            Console.WriteLine($"Fetching products for category {CategoryId}");
            var query = $"api/Products?categoryId={CategoryId}";
            if (!string.IsNullOrEmpty(searchTerm))
            {
                query += $"&search={searchTerm}";
            }
            if (onlyAvailable)
            {
                query += $"&available={onlyAvailable}";
            }
            products = await Http.GetFromJsonAsync<List<ProductDTO>>(query);

            var sessionId = await SessionStorage.GetItemAsync<string>("sessionId");
            if (string.IsNullOrEmpty(sessionId))
            {
                sessionId = Guid.NewGuid().ToString();
                await SessionStorage.SetItemAsync("sessionId", sessionId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task ApplyFilters()
    {
        await LoadProducts();
    }

    private async Task AddToCart(ProductDTO product)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await SessionStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var addToCartDto = new AddToCartDto
                {
                    ProductId = product.ProductId,
                    Quantity = product.Quantity
                };

            var request = new HttpRequestMessage(HttpMethod.Post, "api/Products/AddToCart")
                {
                    Content = JsonContent.Create(addToCartDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddToCartResponseDto>();
                Console.WriteLine($"Success: {result.Message}");
                ShowToast(); // Pokaż komunikat toast
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private void ShowToast()
    {
        showToast = true; // Ustaw flagę showToast na true
        StateHasChanged(); // Odśwież stan komponentu
        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false; // Ustaw flagę showToast na false po 3 sekundach
            InvokeAsync(StateHasChanged); // Odśwież stan komponentu
        });
    }
}
