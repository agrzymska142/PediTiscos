@page "/products/{categoryId:int?}"
@inject HttpClient Http
@using System.Net.Http.Json
@using RCL.Data.DTO
@using Blazored.LocalStorage
@using RCL.Data.Interfaces
@inject ILocalStorageService LocalStorage
@inject ITokenService TokenService

<link href="_content/RCL/product.css" rel="stylesheet" />
<nav class="nav-menu">
    <div class="search-filter">
        <input type="text" placeholder="Search products..." @bind="searchTerm" class="search-input" />
        <button @onclick="ApplyFilters" class="search-button">Search</button>
        <label class="available-label">
            <input type="checkbox" @bind="onlyAvailable" class="available-checkbox" />
            Only available
        </label>
    </div>

    @if (products == null)
    {
        <p>Loading products...</p>
    }
    else if (products.Count == 0)
    {
        <p>No products available.</p>
    }
    else
    {
        <div class="products-container">
            @foreach (var product in products)
            {
                <div class="product-card">
                    <a href="product/@product.ProductId" class="product-link">
                        <img src="https://via.placeholder.com/250" alt="@product.Name" class="product-image" />
                        <div class="product-name">@product.Name</div>
                        <div class="product-description">@product.Description</div>
                        <div class="product-price">Price: @product.Price.ToString("C")</div>
                        <div class="product-stock">Stock: @product.Stock</div>
                    </a>
                    <div class="quantity-container">
                        <label for="quantity-@product.ProductId">Quantity:</label>
                        <input type="number" id="quantity-@product.ProductId" @bind="product.Quantity" min="1" max="@product.Stock" />
                    </div>
                    <button @onclick="() => AddToCart(product)" class="add-to-cart-button">Add to cart</button>
                </div>
            }
        </div>
    }
</nav>

@code {
    private List<ProductDTO> products = new();
    private string searchTerm = string.Empty;
    private bool onlyAvailable = false;

    [Parameter]
    public int? CategoryId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            Console.WriteLine($"Fetching products for category {CategoryId}");
            var query = $"api/Products?categoryId={CategoryId}";
            if (!string.IsNullOrEmpty(searchTerm))
            {
                query += $"&search={searchTerm}";
            }
            if (onlyAvailable)
            {
                query += $"&available={onlyAvailable}";
            }
            products = await Http.GetFromJsonAsync<List<ProductDTO>>(query);

            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            if (string.IsNullOrEmpty(sessionId))
            {
                sessionId = Guid.NewGuid().ToString();
                await LocalStorage.SetItemAsync("sessionId", sessionId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task ApplyFilters()
    {
        await LoadProducts();
    }

    private async Task AddToCart(ProductDTO product)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var addToCartDto = new AddToCartDto
                {
                    ProductId = product.ProductId,
                    Quantity = product.Quantity
                };

            var request = new HttpRequestMessage(HttpMethod.Post, "api/Products/AddToCart")
                {
                    Content = JsonContent.Create(addToCartDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddToCartResponseDto>();
                Console.WriteLine($"Success: {result.Message}");
                // Optionally display a success notification to the user
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {error}");
                // Optionally display an error notification to the user
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
            // Optionally display an error notification to the user
        }
    }
}
