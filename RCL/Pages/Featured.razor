@inject HttpClient Http
@using System.Net.Http.Json
@using RCL.Data.Interfaces
@inject ISessionStorageService SessionStorage
@inject ITokenService TokenService

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="flex justify-center my-10">
    @if (featuredProduct == null)
    {
        <p>Loading featured product...</p> <!-- Wyświetl komunikat ładowania, jeśli produkt wyróżniony jest null -->
    }
    else
    {
        <div class="relative bg-white text-gray-800 border-none rounded-lg shadow-md p-5 w-64 text-center transition-transform transform hover:-translate-y-1 hover:shadow-lg">
            <div class="absolute top-0 left-0 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-br-lg">FEATURED</div> <!-- Baner FEATURED -->
            <a href="product/@featuredProduct.ProductId" class="no-underline text-inherit">
                <img src="@featuredProduct.ImageUrl" alt="@featuredProduct.Name" class="w-full h-auto rounded mb-4" /> <!-- Wyświetlanie obrazu produktu -->
                <div class="font-bold text-xl mb-2">@featuredProduct.Name</div> <!-- Nazwa produktu -->
                <div class="text-gray-600 mb-2">@featuredProduct.Description</div> <!-- Opis produktu -->
                <div class="text-blue-500 font-bold mb-2">Price: @featuredProduct.Price.ToString("C")</div> <!-- Cena produktu -->
                <div class="text-green-500 mb-4">Stock: @featuredProduct.Stock</div> <!-- Stan magazynowy produktu -->
            </a>
            <div class="flex items-center justify-center mb-4">
                <label for="quantity-@featuredProduct.ProductId" class="mr-2">Quantity:</label> <!-- Etykieta dla ilości -->
                <input type="number" id="quantity-@featuredProduct.ProductId" @bind="featuredProduct.Quantity" min="1" max="@featuredProduct.Stock" class="w-16 p-1 border border-gray-300 rounded" /> <!-- Pole wprowadzania ilości -->
            </div>
            <button @onclick="() => AddToCart(featuredProduct)" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Add to cart</button> <!-- Przycisk dodawania do koszyka -->
        </div>
    }
</div>

@if (showToast)
{
    <div class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300" style="opacity: @(showToast ? 1 : 0);">
        Product added to cart successfully! <!-- Komunikat toast -->
    </div>
}

@code {
    private FeaturedProduct featuredProduct; // Zmienna przechowująca wyróżniony produkt
    private bool showToast = false; // Flaga kontrolująca widoczność komunikatu toast

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Pobierz wyróżniony produkt z API
            featuredProduct = await Http.GetFromJsonAsync<FeaturedProduct>("https://localhost:7255/api/Products/featured");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching featured product: {ex.Message}"); // Obsługa błędów
        }
    }

    private async Task AddToCart(FeaturedProduct product)
    {
        try
        {
            // Pobierz identyfikator użytkownika lub sesji
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await SessionStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            // Utwórz DTO do dodania do koszyka
            var addToCartDto = new AddToCartDto
                {
                    ProductId = product.ProductId,
                    Quantity = product.Quantity
                };

            // Utwórz żądanie HTTP POST
            var request = new HttpRequestMessage(HttpMethod.Post, "api/Products/AddToCart")
                {
                    Content = JsonContent.Create(addToCartDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            // Wyślij żądanie
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddToCartResponseDto>();
                Console.WriteLine($"Success: {result.Message}"); // Wyświetl komunikat sukcesu w konsoli
                ShowToast(); // Pokaż komunikat toast
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {error}"); // Wyświetl komunikat błędu w konsoli
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}"); // Obsługa wyjątków
        }
    }

    private void ShowToast()
    {
        showToast = true; // Ustaw flagę showToast na true
        StateHasChanged(); // Odśwież stan komponentu
        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false; // Ustaw flagę showToast na false po 3 sekundach
            InvokeAsync(StateHasChanged); // Odśwież stan komponentu
        });
    }

    // Klasa reprezentująca wyróżniony produkt
    private class FeaturedProduct
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public string CategoryName { get; set; }
        public int Quantity { get; set; }
        public string? ImageUrl { get; set; } // New field for image URL
    }

    // Klasa DTO do dodania do koszyka
    private class AddToCartDto
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    // Klasa DTO odpowiedzi z dodania do koszyka
    private class AddToCartResponseDto
    {
        public string Message { get; set; }
    }
}
