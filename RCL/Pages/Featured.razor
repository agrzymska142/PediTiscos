@inject HttpClient Http

<div class="featured-card">
    @if (featuredProduct == null)
    {
        <p>Loading featured product...</p>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h3>@featuredProduct.Name</h3>
            </div>
            <div class="card-body">
                <p><strong>Description:</strong> @featuredProduct.Description</p>
                <p><strong>Price:</strong> $@featuredProduct.Price</p>
                <p><strong>Stock:</strong> @featuredProduct.Stock</p>
            </div>
        </div>
    }
</div>

<style>
    .featured-card {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 15px;
        width: 300px;
        text-align: center;
    }

    .card-header {
        background-color: #f8f9fa;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        border-radius: 8px 8px 0 0;
    }

        .card-header h3 {
            margin: 0;
            font-size: 1.25rem;
        }

    .card-body p {
        margin: 5px 0;
    }
</style>

@code {
    private FeaturedProduct featuredProduct;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            featuredProduct = await Http.GetFromJsonAsync<FeaturedProduct>("https://localhost:7255/api/Products/featured");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching featured product: {ex.Message}");
        }
    }

    private class FeaturedProduct
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public string CategoryName { get; set; }
    }
}
