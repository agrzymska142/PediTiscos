@page "/register"
@inject HttpClient Http

<link href="_content/RCL/register.css" rel="stylesheet" />

<div class="register-container">
    <h2>Register</h2>
    @if (errors.Any())
    {
        <ul class="error-messages">
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="message">@message</p>
    }
    <form @onsubmit="HandleRegister">
        <div class="form-group">
            <label for="name">Name:</label>
            <input id="name" @bind="registerModel.Name" />
        </div>
        <div class="form-group">
            <label for="surname">Surname:</label>
            <input id="surname" @bind="registerModel.Surname" />
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input id="email" type="email" @bind="registerModel.Email" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input id="password" type="password" @bind="registerModel.Password" />
        </div>
        <button type="submit">Register</button>
    </form>
</div>

@code {
    private RegisterModel registerModel = new();
    private string message = string.Empty;
    private List<string> errors = new();

    private async Task HandleRegister()
    {
        message = string.Empty;
        errors.Clear();

        try
        {
            // Send registration data to the API
            var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                message = "Registration successful! You can now log in.";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorList = System.Text.Json.JsonSerializer.Deserialize<List<ErrorDetail>>(errorContent);
                if (errorList != null)
                {
                    errors.AddRange(errorList.Select(e => e.Description));
                }
                else
                {
                    message = $"Registration failed: {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private class RegisterModel
    {
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class ErrorDetail
    {
        public string Code { get; set; }
        public string Description { get; set; }
    }
}


