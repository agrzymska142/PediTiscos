@page "/register"
@inject HttpClient Http

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="max-w-md mx-auto p-6 bg-gray-100 rounded-lg shadow-md">
    <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Register</h2>
    @if (errors.Any())
    {
        <ul class="list-none p-4 mb-6 text-red-700 bg-red-100 border border-red-300 rounded">
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="text-center p-4 mb-6 text-green-700 bg-green-100 border border-green-300 rounded">@message</p>
    }
    <form @onsubmit="HandleRegister">
        <div class="mb-4">
            <label for="name" class="block mb-2 font-bold text-gray-700">Name:</label>
            <input id="name" @bind="registerModel.Name" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div class="mb-4">
            <label for="surname" class="block mb-2 font-bold text-gray-700">Surname:</label>
            <input id="surname" @bind="registerModel.Surname" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div class="mb-4">
            <label for="email" class="block mb-2 font-bold text-gray-700">Email:</label>
            <input id="email" type="email" @bind="registerModel.Email" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div class="mb-4">
            <label for="password" class="block mb-2 font-bold text-gray-700">Password:</label>
            <input id="password" type="password" @bind="registerModel.Password" class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <button type="submit" class="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-700">Register</button>
    </form>
</div>

@code {
    private RegisterModel registerModel = new();
    private string message = string.Empty;
    private List<string> errors = new();

    private async Task HandleRegister()
    {
        message = string.Empty;
        errors.Clear();

        try
        {
            // Send registration data to the API
            var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                message = "Registration successful! You can now log in.";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorList = System.Text.Json.JsonSerializer.Deserialize<List<ErrorDetail>>(errorContent);
                if (errorList != null)
                {
                    errors.AddRange(errorList.Select(e => e.Description));
                }
                else
                {
                    message = $"Registration failed: {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private class RegisterModel
    {
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class ErrorDetail
    {
        public string Code { get; set; }
        public string Description { get; set; }
    }
}


