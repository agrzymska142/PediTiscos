@page "/cart"
@inject HttpClient Http
@using RCL.Data.DTO
@using Blazored.LocalStorage
@using RCL.Data.Interfaces
@inject ILocalStorageService LocalStorage
@inject ITokenService TokenService

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="max-w-4xl mx-auto p-6 bg-gray-100 rounded-lg shadow-md">
    <h3 class="text-2xl font-bold text-center text-gray-800 mb-6">Your cart</h3>

    @if (cartItems == null)
    {
        <p class="text-center text-gray-600">Loading...</p>
    }
    else if (!cartItems.Any())
    {
        <p class="text-center text-gray-600">Your cart is empty.</p>
    }
    else
    {
        <table class="min-w-full bg-white rounded-lg shadow-md">
            <thead>
                <tr>
                    <th class="py-3 px-4 bg-blue-500 text-white">Name</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Description</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Price per unit</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Amount</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Combined price</th>
                    <th class="py-3 px-4 bg-blue-500 text-white">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-4">@item.Name</td>
                        <td class="py-3 px-4">@item.Description</td>
                        <td class="py-3 px-4">@item.Price.ToString("C")</td>
                        <td class="py-3 px-4">
                            <input type="number" min="1" @bind="item.Quantity" class="w-16 p-2 border border-gray-300 rounded" />
                            <button @onclick="() => UpdateCartItem(item)" class="ml-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-700">Update</button>
                        </td>
                        <td class="py-3 px-4">@(item.Price * item.Quantity).ToString("C")</td>
                        <td class="py-3 px-4">
                            <button @onclick="() => RemoveFromCart(item.ProductId)" class="bg-red-500 text-white p-2 rounded hover:bg-red-700">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="text-right mt-6">
            <button @onclick="PlaceOrder" class="bg-green-500 text-white p-3 rounded hover:bg-green-700">Place Order</button>
        </div>
    }
</div>

@if (showToast)
{
    <div class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300" style="opacity: @(showToast ? 1 : 0);">
        @toastMessage <!-- Komunikat toast -->
    </div>
}

@if (showErrorToast)
{
    <div class="fixed bottom-5 right-5 bg-red-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300" style="opacity: @(showErrorToast ? 1 : 0);">
        @errorMessage <!-- Komunikat błędu toast -->
    </div>
}

@code {
    private List<CartItemDto> cartItems;
    private bool showToast = false; // Flaga kontrolująca widoczność komunikatu toast
    private bool showErrorToast = false; // Flaga kontrolująca widoczność komunikatu błędu toast
    private string toastMessage; // Treść komunikatu toast
    private string errorMessage; // Treść komunikatu błędu toast

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var request = new HttpRequestMessage(HttpMethod.Get, "api/products/cart");
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                cartItems = await response.Content.ReadFromJsonAsync<List<CartItemDto>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching cart items: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task UpdateCartItem(CartItemDto item)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var updateCartItemDto = new UpdateCartItemDto
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity
                };

            var request = new HttpRequestMessage(HttpMethod.Put, "api/products/UpdateCartItem")
                {
                    Content = JsonContent.Create(updateCartItemDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating cart item: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task RemoveFromCart(int productId)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var request = new HttpRequestMessage(HttpMethod.Delete, $"api/products/RemoveFromCart/{productId}");
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                cartItems = cartItems.Where(ci => ci.ProductId != productId).ToList();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error removing cart item: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task PlaceOrder()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("User must be logged in to place an order.");
                ShowErrorToast("User must be logged in to place an order.");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "api/products/PlaceOrder");
            request.Headers.Add("sessionId", userId);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Order placed successfully.");
                cartItems.Clear();
                ShowToast("Order placed successfully.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error placing order: {error}");
                ShowErrorToast($"Error placing order: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            ShowErrorToast($"Exception: {ex.Message}");
        }
    }

    private void ShowToast(string message)
    {
        toastMessage = message; // Ustaw treść komunikatu toast
        showToast = true; // Ustaw flagę showToast na true
        StateHasChanged(); // Odśwież stan komponentu
        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false; // Ustaw flagę showToast na false po 3 sekundach
            InvokeAsync(StateHasChanged); // Odśwież stan komponentu
        });
    }

    private void ShowErrorToast(string message)
    {
        errorMessage = message; // Ustaw treść komunikatu błędu toast
        showErrorToast = true; // Ustaw flagę showErrorToast na true
        StateHasChanged(); // Odśwież stan komponentu
        Task.Delay(3000).ContinueWith(_ =>
        {
            showErrorToast = false; // Ustaw flagę showErrorToast na false po 3 sekundach
            InvokeAsync(StateHasChanged); // Odśwież stan komponentu
        });
    }
}

