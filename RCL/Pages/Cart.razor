@page "/cart"
@inject HttpClient Http
@using RCL.Data.DTO
@using Blazored.LocalStorage
@using RCL.Data.Interfaces
@inject ILocalStorageService LocalStorage
@inject ITokenService TokenService

<link href="_content/RCL/cart.css" rel="stylesheet" />

<div class="cart-container">
    <h3>Your cart</h3>

    @if (cartItems == null)
    {
        <p>Loading...</p>
    }
    else if (!cartItems.Any())
    {
        <p>Your cart is empty.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price per unit</th>
                    <th>Amount</th>
                    <th>Combined price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Description</td>
                        <td>@item.Price.ToString("C")</td>
                        <td>
                            <input type="number" min="1" @bind="item.Quantity" />
                            <button @onclick="() => UpdateCartItem(item)">Update</button>
                        </td>
                        <td>@(item.Price * item.Quantity).ToString("C")</td>
                        <td>
                            <button @onclick="() => RemoveFromCart(item.ProductId)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="PlaceOrder">Place Order</button>
    }
</div>

@code {
    private List<CartItemDto> cartItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var request = new HttpRequestMessage(HttpMethod.Get, "api/products/cart");
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                cartItems = await response.Content.ReadFromJsonAsync<List<CartItemDto>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching cart items: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task UpdateCartItem(CartItemDto item)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var updateCartItemDto = new UpdateCartItemDto
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity
                };

            var request = new HttpRequestMessage(HttpMethod.Put, "api/products/UpdateCartItem")
                {
                    Content = JsonContent.Create(updateCartItemDto)
                };
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating cart item: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task RemoveFromCart(int productId)
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            var sessionId = await LocalStorage.GetItemAsync<string>("sessionId");
            var userIdentifier = !string.IsNullOrEmpty(userId) ? userId : sessionId;

            var request = new HttpRequestMessage(HttpMethod.Delete, $"api/products/RemoveFromCart/{productId}");
            request.Headers.Add("sessionId", userIdentifier);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                cartItems = cartItems.Where(ci => ci.ProductId != productId).ToList();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error removing cart item: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task PlaceOrder()
    {
        try
        {
            var userId = await TokenService.GetUserIdAsync();
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("User must be logged in to place an order.");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "api/products/PlaceOrder");
            request.Headers.Add("sessionId", userId);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Order placed successfully.");
                cartItems.Clear();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error placing order: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
