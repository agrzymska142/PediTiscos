@page "/products/delete/{ProductId:int}"
@using Microsoft.EntityFrameworkCore
@using StoreManager.Data
@using StoreManager.Data.Models
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, Employee")]

<h3>Delete Product</h3>
<p>Are you sure you want to delete the product "@Product?.Name"?</p>
<p>
    <button class="btn btn-danger" @onclick="HandleDelete">Yes</button>
    <button class="btn btn-secondary" @onclick="Cancel">No</button>
</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    [Parameter] public int ProductId { get; set; }
    private Product? Product;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        Product = await DbContext.Products.FindAsync(ProductId);
    }

    private async Task HandleDelete()
    {
        if (Product != null)
        {
            // Sprawdź, czy produkt występuje w zamówieniach z odpowiednim statusem
            bool isProductInApprovedOrShippedOrders = await DbContext.OrderDetails
                .Include(od => od.Order)
                .AnyAsync(od => od.ProductId == ProductId && (od.Order.Status == "Confirmed" || od.Order.Status == "Shipped"));

            if (isProductInApprovedOrShippedOrders)
            {
                ErrorMessage = "Cannot delete the product because it has been sold in approved or shipped orders.";
            }
            else
            {
                DbContext.Products.Remove(Product);
                await DbContext.SaveChangesAsync();
                NavManager.NavigateTo("/products");
            }
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/products");
    }
}
