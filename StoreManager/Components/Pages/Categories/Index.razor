@page "/categories"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using StoreManager.Data
@using StoreManager.Data.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, Employee")]

<h3 class="mb-4">Categories</h3>

<p>
    <button class="btn btn-primary" @onclick="CreateCategory">Add New Category</button>
</p>

<table class="table table-striped mt-3">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in Categories)
        {
            <tr>
                <td>@category.Name</td>
                <td>@category.Description</td>
                <td>
                    <button class="btn btn-sm btn-primary me-2" @onclick="() => EditCategory(category.CategoryId)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Category> Categories = new();

    // Metoda wywoływana podczas inicjalizacji komponentu
    protected override async Task OnInitializedAsync()
    {
        // Pobieranie listy kategorii z bazy danych
        Categories = await DbContext.Categories.ToListAsync();
    }

    // Metoda nawigująca do strony tworzenia nowej kategorii
    private void CreateCategory()
    {
        NavManager.NavigateTo("categories/create");
    }

    // Metoda nawigująca do strony edycji wybranej kategorii
    private void EditCategory(int id)
    {
        NavManager.NavigateTo($"/categories/edit/{id}");
    }

    // Metoda nawigująca do strony usuwania wybranej kategorii
    private void DeleteCategory(int id)
    {
        NavManager.NavigateTo($"/categories/delete/{id}");
    }
}
