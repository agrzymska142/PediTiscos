@page "/categories/create"
@using Microsoft.AspNetCore.Authorization
@using StoreManager.Data
@using StoreManager.Data.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, Employee")]

<h3 class="mb-4">Create Category</h3>

<EditForm Model="@NewCategory" OnValidSubmit="HandleCreate" FormName="CreateCategoryForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="NewCategory.Name" />
        <ValidationMessage For="@(() => NewCategory.Name)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <InputText id="description" class="form-control" @bind-Value="NewCategory.Description" />
    </div>
    <button type="submit" class="btn btn-primary me-2">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private Category NewCategory = new();

    private async Task HandleCreate()
    {
        // Logging for debugging
        Console.WriteLine($"Name: {NewCategory.Name}, Description: {NewCategory.Description}");

        // Validation check for debugging purposes
        if (string.IsNullOrWhiteSpace(NewCategory.Name))
        {
            Console.WriteLine("Name is missing or invalid.");
            return;
        }

        DbContext.Categories.Add(NewCategory);
        await DbContext.SaveChangesAsync();
        NavManager.NavigateTo("/categories");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/categories");
    }
}
